#!/usr/bin/env bash

# github raw mirror
gitrawdown() {
    if [ $# -lt 2 ]; then
        echo "缺少参数"
        return 1
    fi
    local url=$(echo $1 | \
        sed 's|github.com/\(.*\)/\(.*\)/blob/\(.*\)|raw.githubusercontent.com/\1/\2/refs/heads/\3|g' | \
        sed 's|raw.githubusercontent.com|raw.gitmirror.com|')
    echo "Downloading... $url"
    echo "=> $2"
    curl -fL $url > $2
}
# ocr
# https://gitee.com/we-mid/go/blob/main/ocr
# go install gitee.com/we-mid/go/ocr/cmd/ocrscan@latest
ocr() {
    (
        # best经常遗漏第一行 不可取
        # export TESSDATA_PREFIX=~/we-mid/go/ocr/tessdata_best
        export TESSDATA_PREFIX=~/we-mid/go/ocr/tessdata_fast
        # ocrscan -l eng,chi_sim ${1:-'-c'}
        # ocrscan -l chi_sim,eng ${1:-'-c'}
        ocrscan -l chi_sim ${1:-'-c'}
    )
}

# background raining
# See also: crx/itsraining
raining() {
  mpv --loop=1 ~/Downloads/下雨声RainyMood.mp3
}

# ollama
function ask() {
    curl http://localhost:11434/api/chat -d "{
        \"model\": \"${2-qwen2:0.5b}\", \"stream\": false,
        \"messages\": [
            { \"role\": \"user\", \"content\": \"$1\" }
        ]
    }"
}
alias a=ask

# electron-forge packaging
function efpack() {
    PRODUCT_NAME=$(jq -r '.productName' package.json)
    yarn package
    codesign --deep --force --verbose --sign - out/$PRODUCT_NAME-darwin-universal/$PRODUCT_NAME.app
}
function efopen() {
    PRODUCT_NAME=$(jq -r '.productName' package.json)
    open out/Track-darwin-universal/$PRODUCT_NAME.app
}

# lookup an ip
function sip() {
  # ip138不直接支持ipv6
  # 使用[[ 和 =~ 进行模式匹配，检查字符串是否包含冒号
  if [[ $1 =~ : ]]; then
    open "https://www.ipshudi.com/$1.htm"
  else
    open "https://www.ip138.com/iplookup.php?ip=$1"
  fi
}
function ipp() {
    if [ $# -lt 1 ]; then
        echo "缺少参数"
        return 1
    fi
    grep -C 10 $1 ~/we-mid/bec-infra/x/ip2r/patch_config.go
    grep -C 10 $1 ~/we-mid/bec-infra/svc_apis/ip2r_patch.txt
}
function sre() {
    # if [[ -z $1 ]]; then
    if [ $# -lt 1 ]; then
        echo "缺少参数"
        return 1
    fi
    grep -C 10 $1 ~/we-mid/bec-infra/x/ip2r/patch_config.go
    grep -C 10 $1 ~/we-mid/bec-infra/svc_apis/ip2r_patch.txt
    echo "---"
    grep -C 10 $1 ~/we-mid/bec-analysis/regionmap/src/data/map.js
}
function geo() {
    if [ $# -lt 1 ]; then
        echo "缺少参数"
        return 1
    fi
    out_city=$(hgrep $1 ~/Documents/100000_full_city.json 1 60)
    [ -n "$out_city" ] && echo $out_city || hgrep $1 ~/Documents/100000_full.json 1 60
}
function hgrep() {
    if [ $# -lt 2 ]; then
        echo "缺少参数"
        return 1
    fi
    lf="${3:-60}"
    rt="${4:-$lf}"
    awk -v kw="$1" -v lf="$lf" -v rt="$rt" '{
        idx=index($0,kw);
        if (idx>0) {
            start=idx-lf;  # 包括关键词前5个字符
            end=idx+length(kw)+rt;  # 包括关键词后5个字符
            # 确保不会超出文本范围
            start=(start<1)?1:start;
            end=(end>length($0))?length($0):end;
            print substr($0,start,end-start+1);
        }
    }' $2
}

# random password
function rndpwd() {
    local n=$1
    r=$(openssl rand -base64 32)
    if [ -n "$n" ]; then
      r=$(echo $r | cut -c-1-$n)
    fi
    echo $r
}

# git
function gspp() {
    local customfn="$1"
    # fix ls behavior when gspp called in other scripts
    # local lswip="$(ls -a .wip-git-stash* 2>/dev/null)"
    local lswip="$(sh -c 'ls -a .wip-git-stash* 2>/dev/null')"
    if [ -n "$lswip" ]; then
      echo "Found $lswip"
      echo 'Please check with `git stash list` and remove .wip-git-stash* before you process gspp'
      return 1
    fi
    local notclean=$(test -n "$(git status --porcelain)" && echo true || echo false)
    local dt="$(date '+%Y-%m-%d_%H:%M:%S')"
    local wipfile=".wip-git-stash-u_$(echo "$dt" | sed 's/:/-/g')"

    function _gspp() {
        echo "...gspp stage 1. stash..."
        if [ $notclean = true ]; then
            local wipctn="$(git status)\n\n---\n\n$(git log | head -n 10)"
            git stash push -u -m "$dt"
            echo "$wipctn" > "$wipfile"
        fi
        if [ -n "$customfn" ]; then
            echo "...gspp stage 2. custom fn..."
            $customfn
        else
            echo "...gspp stage 2. pull..."
            git pull --rebase
        fi
        _finally
    }
    function _finally() {
        echo "...gspp stage 3. pop..."
        if [ $notclean = true ]; then
            git stash pop
            rm "$wipfile"
        fi
        echo "...gspp stage 4. reset..."
        git add -A
        git reset
        echo "...gspp stage 5. completed."
    }
    (
        # 绑定信号并在原函数执行前后管理陷阱
        trap '_finally; exit 130' SIGINT
        trap '_finally; exit 131' SIGQUIT
        trap '_finally; exit 143' SIGTERM
        _gspp
        trap - SIGINT SIGQUIT SIGTERM  # 执行完后恢复默认信号行为
    )
}

# npm rush register
function npm_reg() {
  # ~/d is the directory where i develop
  cd ~/d
  mkd "$1"
  npm init -y
  # version `0.0.0` instead of `1.0.0`
  cat package.json | \
    js -to 'x.version = `0.0.0`, JSON.stringify(x, null, 2)+`\n`'  \
    > package.json
  npm publish
}

# short for imagemin
function imgmin() {
  imagemin $1 --out-dir .
}

# prepend text to file
# https://unix.stackexchange.com/questions/56975/whats-the-command-to-prepend-a-line-to-a-file
function prepend() {
  local text=$2
  local file=$1
  local tmpfile="$file.prepend.tmp"
  (echo $text; cat $file) > $tmpfile; mv $tmpfile $file
}

export PATH=$PATH:$HOME/bin
# alias k=kanban
alias k=kubectl
alias kc=kubectl
alias mk=minikube

# proxy
function proxyenable() {
  networksetup -setwebproxystate "Wi-Fi" on
  networksetup -setsecurewebproxystate "Wi-Fi" on
  networksetup -setsocksfirewallproxystate "Wi-Fi" on
}
function proxydisable() {
  networksetup -setwebproxystate "Wi-Fi" off
  networksetup -setsecurewebproxystate "Wi-Fi" off
  networksetup -setsocksfirewallproxystate "Wi-Fi" off
}
function proxyon() {
  networksetup -getwebproxy "Wi-Fi" | grep -q 'Enabled: Yes' || echo '[warn] proxy is not enabled now. Run `proxyenable` first'
  export https_proxy=http://127.0.0.1:8118 http_proxy=http://127.0.0.1:8118 all_proxy=socks5://127.0.0.1:8119
  export HTTPS_PROXY=http://127.0.0.1:8118 HTTP_PROXY=http://127.0.0.1:8118 ALL_PROXY=socks5://127.0.0.1:8119
  # Proxies and VPNs | minikube
  # https://minikube.sigs.k8s.io/docs/handbook/vpn_and_proxy/
  export NO_PROXY=localhost,127.0.0.1,10.96.0.0/12,192.168.59.0/24,192.168.49.0/24,192.168.39.0/24
}
function proxyoff() {
  unset https_proxy http_proxy all_proxy
  unset HTTPS_PROXY HTTP_PROXY ALL_PROXY
}
